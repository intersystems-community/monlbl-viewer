<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="GMONLBL.Broker">
<Super>GMONLBL.AbstractREST</Super>
<TimeCreated>63160,86030.979011</TimeCreated>

<XData name="UrlMap">
<Description>
The UrlMap determines how a Url should map to a HTTP Method and a Target ClassMethod
indicated by the 'call' attribute. The call attribute is either the name of a method
or the name of a class and method seperated by a ':'.
parameters within the URL preceeded by a ':' will be extracted from the supplied URL
and passed as arguments to the named method.</Description>
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes >
    <!-- Get monitor status -->
    <Route Url="/status" Method="GET" Call="CheckMonitorStatus"/>

    <!-- Start monitor -->
    <Route Url="/start" Method="POST" Call="StartMonitor"/>  

    <!-- Stop monitor -->
    <Route Url="/stop" Method="GET" Call="StopMonitor"/> 

    <!-- Pause monitor -->
    <Route Url="/pause" Method="GET" Call="PauseMonitor"/>

    <!-- Resume monitor-->
    <Route Url="/resume" Method="GET" Call="ResumeMonitor"/>

    <!-- Reset monitor's statistics -->
    <Route Url="/reset" Method="GET" Call="ResetStats"/>

    <!-- Get routines summary -->
    <Route Url="/summary" Method="GET" Call="GetSummary"/>  

    <!-- Pass list of routines -->
    <Route Url="/routines" Method="POST" Call="GetRoutineListByMask"/>

    <!-- Get routine statistisc -->
    <Route Url="/routine" Method="POST" Call="GetRoutineData"/>
    
    <!-- Get namespaces list -->
    <Route Url="/ns" Method="GET" Call="GetNSList"/>

    <!-- Test method -->
    <Route Url="/test" Method="GET" Call="Test"/>
</Routes>
]]></Data>
</XData>

<Method name="Http404">
<Description>
Issue an '404' error (user can override)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<<h3 style="color:red">Page not found!</h3>>
  
    set %response.Status="404 Not Found"
    return $$$OK
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<PublicList>ok</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    xecute "set ok = 1"
    write:(ok) "OK"

    return $$$OK
]]></Implementation>
</Method>

<Method name="CheckMonitorStatus">
<Description>
Return monitor status</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ns = $get(^|"%SYS"|SYS("MONITOR","NS")) 
    
    if (..isMonitorStopped()) {
        write "{ ""status"" : ""0"", ""namespace"" : """_ns_""" }"
        return $$$OK
    }

  
    if (..isMonitorStarted()) {
        if (..isMonitorPaused()) {
            write "{ ""status"" : ""2"", ""namespace"" : """_ns_"""  }"
            return $$$OK
        }

        write "{ ""status"" : ""1"", ""namespace"" : """_ns_"""  }"
        return $$$OK
    }
]]></Implementation>
</Method>

<Method name="isMonitorStopped">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    /* if $zu(84,8) = 0 then Monitor stopped */
    if ($zu(84, 8) = 0) return 1
    return 0
]]></Implementation>
</Method>

<Method name="isMonitorPaused">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    /* if $zu(84,1) = 0 then Monitor started, but paused */
    if ($zu(84, 1) = 0) return 1
    return 0
]]></Implementation>
</Method>

<Method name="isMonitorStarted">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    /* if $zu(84,8) = 1 then Monitor started */
    if ($zu(84, 8) = 1) return 1
    return 0
]]></Implementation>
</Method>

<Method name="StartMonitor">
<Description>
Start Caché Monitor</Description>
<ClassMethod>1</ClassMethod>
<PublicList>ok</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set routineList = ""
    set rtn = ""
    set nlist = 0
    
    set:$isobject(%request.Content) routineList = %request.Content.routineList, ns = %request.Content.namespace
        
    lock +^|"%SYS"|SYS("MON-HOLD"):3
    lock +^|"%SYS"|SYS("MONITOR","NS"):3
    
    if ('$TEST) {
        lock -^|"%SYS"|SYS("MON-HOLD") 
        write "{ ""status"" : ""-1"" }"
        return $$$OK
    }
       
    set ^|"%SYS"|SYS("MONITOR","NS") = ns   
       
    /* deselect all, prepare to incoming routine list */
    do $zu(84, 12, 0)

    set j = 1
    set rtnName = $piece(routineList, "|", j)
      
    while (rtnName '= "") 
    {
        set rtnName = rtnName_".obj"

        do {
            set data = ""
            set more = $$LIST^%R(rtnName, 32767, 0, .data, .ctx)

            for i = 1 : 1 : $listlength(data) 
            {
                set rtn = $list(data, i)
                set rtn = $piece(rtn, ".", 1, $length(rtn, ".") - 1)

                continue:($znspace = "%SYS" && rtn = "START") 

                xecute "zl "_rtn_" set ok = $zu(84, 12, 1)"
                set:ok nlist = nlist + 1
            }

        } while more

        set j = j + 1
        set rtnName = $piece(routineList, "|", j)
    }

    if (nlist = 0) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""0"" }"
        return $$$OK
    }

    /* select all */
    do $zu(84, 13, 2)

    /* allocate memory and initialize data structures
    // (switch on monitoring) */
    if ($zu(84, 0, 1, 1, 1, 1, 1, 1) '= 1) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-1"" }"
        return $$$OK
    }
 
    /* enable stats for all jobs */
    if ($zu(84, 1, 1) '= 1) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-2"" }"
        return $$$OK
    }

    /* enable line-by-line monitoring */
    do $zu(84, 15)

    set ^|"%SYS"|SYS("MONITOR","START") = $horolog
    kill ^|"%SYS"|SYS("MONITOR","PAUSE")
    kill ^|"%SYS"|SYS("MONITOR","PAUSE-TIME")

    lock -^|"%SYS"|SYS("MON-HOLD")
    
    write "{ ""status"" : """_nlist_""" }"
    return $$$OK
]]></Implementation>
</Method>

<Method name="StopMonitor">
<Description>
Stop Caché Monitor</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    lock +^|"%SYS"|SYS("MON-HOLD"):3

    /* disable stats */
    set status = $zu(84, 1, 0)

    /* end collection */
    set status = $zu(84, 0, 0)

    kill ^|"%SYS"|SYS("MONITOR","START")
    kill ^|"%SYS"|SYS("MONITOR","PAUSE")
    kill ^|"%SYS"|SYS("MONITOR","PAUSE-TIME")
    kill ^|"%SYS"|SYS("MONITOR","NS")

    lock -^|"%SYS"|SYS("MON-HOLD")
    lock -^|"%SYS"|SYS("MONITOR","NS")
    
    write "{ ""status"" : """_status_""" }"
    return $$$OK
]]></Implementation>
</Method>

<Method name="ResumeMonitor">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    lock +^|"%SYS"|SYS("MON-HOLD"):3
  
    /* somebody already uses monitor */ 
    if ('$TEST) {
        lock -^|"%SYS"|SYS("MON-HOLD") 
        write "{ ""status"" : ""-1"" }"
        return $$$OK
    }

    /* Monitor is not running */
    if (..isMonitorStopped()) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-2"" }"
        return $$$OK
    }

    /* Monitor already running */
    if ($zu(84, 1) = 1) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-3"" }"
        return $$$OK
    }

    do $zu(84, 1, 1)
    set h1 = $horolog

    if $d(^|"%SYS"|SYS("MONITOR","PAUSE")) {
        set x=((h1-^|"%SYS"|SYS("MONITOR","PAUSE"))*86400)+($p(h1,",",2)-$p(^|"%SYS"|SYS("MONITOR","PAUSE"),",",2))
        set ^|"%SYS"|SYS("MONITOR","PAUSE-TIME")=x+$g(^|"%SYS"|SYS("MONITOR","PAUSE-TIME"))
        kill ^|"%SYS"|SYS("MONITOR","PAUSE")
    }

    lock -^|"%SYS"|SYS("MON-HOLD")
    write "{ ""status"" : ""1"" }"
    return $$$OK
]]></Implementation>
</Method>

<Method name="PauseMonitor">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    lock +^|"%SYS"|SYS("MON-HOLD"):3

    /* somebody already uses monitor */ 
    if ('$TEST) {
        lock -^|"%SYS"|SYS("MON-HOLD") 
        write "{ ""status"" : ""-1"" }"
        return $$$OK
    }

    /* monitor is not running */
    if ($zu(84, 8) = 0) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-2"" }"
        return $$$OK
    }

    /* monitor already paused */
    if ($zu(84, 1) = 0) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""-3"" }"
        return $$$OK
    }

    /* disable stats */
    do $zu(84, 1, 0)

    set ^|"%SYS"|SYS("MONITOR","PAUSE") = $horolog 
    lock -^|"%SYS"|SYS("MON-HOLD")

    write "{ ""status"" : ""1"" }"
    return $$$OK
]]></Implementation>
</Method>

<Method name="ResetStats">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    lock +^|"%SYS"|SYS("MON-HOLD"):3
    
    /* clear stats */
    do $zu(84, 2)

    lock -^|"%SYS"|SYS("MON-HOLD")

    write "{ ""status"" : ""1"" }"
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetRoutineListByMask">
<Description>
Get routine list by mask</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set routineList = ""
    set rtn = ""
    set nlist = 0

    set:$isobject(%request.Content) routineList = %request.Content.routineList

    lock +^|"%SYS"|SYS("MON-HOLD"):3

    /* deselect all, prepare to incoming routine list */
    do $zu(84, 12, 0)

    set j = 1
    set rtnName = $piece(routineList, "|", j)
    set routinesByMask = ""
      
    while (rtnName '= "") 
    {
        set rtnName = rtnName_".obj"

        do {
            set data = ""
            set more = $$LIST^%R(rtnName, 32767, 0, .data, .ctx)

            for i = 1 : 1 : $listlength(data) 
            {
                set rtn = $list(data, i)
                set rtn = $piece(rtn, ".", 1, $length(rtn, ".") - 1)

                continue:($znspace = "%SYS" && rtn = "START")

                set nlist = nlist + 1
                set routinesByMask = routinesByMask_$lb(rtn)
            }
        } while more

        set j = j + 1
        set rtnName = $piece(routineList, "|", j)
    }

    set routinesByMask = $listtostring(routinesByMask, "|")

    if (nlist = 0) {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : ""0"", ""routineList"" : """" }"
        
    } else {
        lock -^|"%SYS"|SYS("MON-HOLD")
        write "{ ""status"" : """_nlist_""", ""routineList"" : """_routinesByMask_""" }"
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetSummary">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set index = $increment(^CacheTemp)
    $$$AddTempNode(^CacheTemp(index))

    set sortIndex = -1
    set rtnLine = -1

    for metric = 0 : 1 : ($zutil(84, 13) - 1) 
    {
        set n = $zutil(84, 13, 11, metric)
        set:(n = 50) sortIndex = metric
        set:(n = 33) rtnLine = metric
    }

    /* $zu(84,16) returns number of routines being monitored */
    for rtnNum = 1 : 1 : ($zu(84, 16)) 
    {
        /* don't report on routines with no lines executed */
        continue:($zu(84, 16, 1, rtnNum) = 0)

        kill metric
        set hits = 0

        /* zero coverage stats */
        if ($zutil(84, 16, 1, rtnNum) = 0) {
            /* get number of lines in routine */
            set line = $$LENGTH^%R($zu(84, 16, 2, rtnNum))

            if (line = 0) { 
                set metric(-1) = -1
                set metric(-2) = 0
                set metric(-3) = "NA"
            } else {
                set metric(-1) = 0
                set metric(-2) = 0
                set metric(-3) = line
            }
        }

        /* for each routine line */
        for line = 0 : 1 : ($zu(84, 16, 1, rtnNum) - 1)
        {
            /* for each metric */
            for i = 0 : 1 : ($zu(84, 13) - 1)
            {
                set metric(i) = $get(metric(i)) + $zu(84, 16, 3, line, i)
            }

            set:($zu(84, 16, 3, line, rtnLine)) hits = hits + 1
        }

        set line = $zu(84, 16, 7, rtnNum)
        set metric(-3) = line
        set metric(-2) = hits
        set metric(-1) = +$fnumber(hits / line * 100, "", 2)
        
        /* $zu(84,16,2,rtn_n) returns routine name by number */
        set rtn = $zu(84, 16, 2, rtnNum)

        if (sortIndex = -1) {
            set sort = sortIndex
        } else {
            set sort = metric(sortIndex)
        }

        merge ^CacheTemp(index, sort, rtn) = metric
    }

    kill totmetric
    kill summary

    set count = 0
    set sort = $order(^CacheTemp(index, ""), -1)

    while (sort '= "")
    {
        set rtn = $order(^CacheTemp(index, sort, ""))

        while (rtn '= "")
        {
            set summary(rtn) = count
            set count = count + 1
            set metric = $order(^CacheTemp(index, sort, rtn, ""), 1, out)

            while (metric '= "")
            {
                set totmetric(metric) = $get(totmetric(metric)) + out

                /* handle coverage percent */
                if (metric = -3)
                {
                    set out = $select(out = -1: "NA", 1: out)
                    set summary(rtn, "LinesCode") = out
                }

                if (metric = -2)
                {
                    set out = $select(out = -1: "NA", 1: out)
                    set summary(rtn, "LinesHit") = out
                }

                set n = ""
                set:(metric '< 0) n = $zu(84, 13, 11, metric)
                set:((n = 50) || (n = 51)) out = $select(out = 0: "0", 1: $fnumber(out / 1000000, "", 6))

                /* don't accumulate total time, it doesn't make sense */
                set:(n = 50) summary(rtn, "Time") = out

                set metric = $order(^CacheTemp(index, sort, rtn, metric), 1, out)
            }

            set rtn = $order(^CacheTemp(index, sort, rtn))
        }

        set sort = $order(^CacheTemp(index, sort), -1)
    }

    kill ^CacheTemp(index)
    $$$RemoveTempNode(^CacheTemp(index))

    set json = "["
    set rtn = $order(summary(""))

    while (rtn '= "")
    {
        set json = json_"{""Routine"":"""_rtn_
                        """,""LinesCode"":"""_summary(rtn, "LinesCode")_
                        """,""LinesHit"":"""_summary(rtn, "LinesHit")_
                        """,""Time"":"""_summary(rtn, "Time")_"""},"
        set rtn = $order(summary(rtn))
    }

    if (json '= "[") {
        set json = $extract(json, 1, *-1)_"]"

    } else {
        set json = ""
    }

    write json      
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetRoutineData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set stream = ##class(%Stream.TmpCharacter).%New()
    set outStream = ##class(%Stream.TmpCharacter).%New()
    set colorer = ##class(%SyntaxColor).%New()
    set visitor = ##class(GMONLBL.Visitor).%New()
      
    set rtnName = %request.Content.rtnName  
      
    /* find routine */
    set rtnNum = $zu(84, 16)
    set found = 0

    for rtn = 1 : 1 : rtnNum 
    {
        if (rtnName = $zu(84, 16, 2, rtn)) {
            set found = 1
            quit
        }
    }

    return:('found) $$$OK


    /* collect routine data */
    set lines = $zu(84, 16, 1, rtn)
    return:(lines = 0) $$$OK
    

    for line = 0 : 1 : (lines - 1)
    {
        kill map
        set list = ""

        set data = $zu(84, 16, 3, line, 33)
        set list = list_$listbuild(data)

        /* line time */
        set data = $zu(84, 16, 3, line, 50)
        /* convert clock/CPU time to seconds */
        set data = $select(data = 0:0, 1:$fnumber(data / 1000000, "", 6))
        set list = list_$listbuild(data)
        set localTime = data


        /* total time */
        set data = $zutil(84, 16, 3, line, 51)
        /* convert clock/CPU time to seconds */
        set data = $select(data = 0:0, 1:$fnumber(data / 1000000, "", 6))
        set list = list_$listbuild(data)
        set totalTime = data
        

        set codeLine = $$LINE^%R(rtnName, line + 1)

        set visitor.Routines = ""
        set visitor.Classes = ""
        set visitor.Methods = ""
        set rtnNamesList = ""

        /* Missing lines without routine calls */
        if (totalTime > localTime) {

            set tree = ##class(%Compiler.COS.ParseTree).Parse(codeLine, ,.sc)

            set:('sc) tree = ""

            kill classList
            kill methodList
        
            if (tree '= "") {
                do tree.accept(visitor)

                set rtnNamesList = ""
                set routines = visitor.Routines
                set classList = visitor.Classes
                set methodList = visitor.Methods
                 
                if ($listlength(routines)) {
                    for k = 1 : 1 : $listlength(routines)
                    {
                        set routine = $piece($list(routines, k), "^", 2)
                        set method = $piece($list(routines, k), "^", 1)
              
                        if (method '= "") {
                            do ##class(%Studio.Debugger).INTLine(routine_".MAC", method, 0, .intName, .intLine)
                            set:(intName '= "") rtnNamesList = rtnNamesList_intName_"~"_intLine_"~"_method_"|"
                        } else {
                            set:(routine '= "") rtnNamesList = rtnNamesList_routine_"|"
                        }
                    } 
                }            
                    
                    
                if ($listlength(classList)) {
                    for k = 1 : 1 : $listlength(classList) 
                    {
                        do ##class(%Studio.Debugger).INTLine($li(classList, k)_".CLS", $li(methodList, k), 0, .intName, .intLine)
                        set:(intName '= "") rtnNamesList = rtnNamesList_intName_"~"_intLine_"~"_$li(methodList, k)_"|"
                    } 
                }         

                set:(rtnNamesList '= "") rtnNamesList = $extract(rtnNamesList, 1, *-1)

            }

        }

        do stream.WriteLine(codeLine)
        do colorer.Color(stream, outStream)

        set codeLine = $replace(outStream.ReadLine(), "\", "\\")
        set codeLine = $replace(codeLine, $char(09), "\t")
        set codeLine = $replace(codeLine, """", "\""")

        set list = list_$listbuild(codeLine)
        set list = list_$listbuild(rtnNamesList)

        set totalData(line + 1) = list
    }


    /* assambling JSON */
    set json = "["

    for line = 1 : 1 : lines 
    {
        set list = totalData(line)
      
        set json = json_"{""RtnLine"":"""_$li(list, 1)_
                         """,""Time"":"""_$li(list, 2)_
                         """,""TotalTime"":"""_$li(list, 3)_
                         """,""Line"":"""_$li(list, 4)_
                         """,""Calls"":"""_$li(list, 5)_
                         """},"
    }  


    if (json '= "[") {
        set json = $extract(json, 1, *-1)_"]"
        
    } else {
         set json = ""
    }

    write json
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetNSList">
<Description>
Returns comma-separated list of all local availible namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(%CSP.Portal.Utils).%GetNamespaceList(.nsarray)
    return:$$$ISERR(st) st
    
    set namespace = $o(nsarray(""))
    set nslist = ""
    
    while namespace '= "" {
        set enabled = $lg(nsarray(namespace), 1)
        set remote = $lg(nsarray(namespace), 2)
        
        if ((enabled = 1) && (remote = 0)) {
            set nslist = nslist_""""_namespace_""""_"," 
        }
        
        set namespace = $o(nsarray(namespace))
    }
    
    set nslist = $e(nslist, 1, *-1)
    write "["_nslist_"]"
    return $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
