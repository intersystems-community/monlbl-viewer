<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="js/eventHandlers.js" application="/csp/user/gmonlbl/"><![CDATA[
// click handler for 'Start Monitor' button in Routine patterns' popup 
$('#btnRoutinesPopup').click(btnRoutinesPopupClick);

function btnRoutinesPopupClick() {
  
  if ($('#search').val() !== '') {
    menuBtnClick('Start', $('#search').val());
    $('#search').val('');
  }
  else {
    $('#emptyRoutinePatternText').text('There is no routine selected. Monitor does not started.');
    $('#emptyRoutinePattern').toggleClass('hidden');
  }

  $('#searchPopup').toggleClass('active');
};




// click handler for Pause/Resume button
$('#btnPauseResume').click(function() {
  if ($('#btnPauseResume').html() == 'Pause') {
    menuBtnClick('Pause');  
  }
  else if ($('#btnPauseResume').html() == 'Resume') {
    menuBtnClick('Resume'); 
  }
});


// click handler for Summary button
$('#btnSummary').click(btnSummaryClick);    

function btnSummaryClick() {
  // variable declaration
  var
    // JSON accured from server response
    jsonData,
    // table row
    tr;

  if (!$('.js-jumbotron').hasClass( 'hidden')) {
    $('.js-jumbotron').toggleClass('hidden');
  }

  if (!$('#timeCell').hasClass('asc')) {
    $('#timeCell').toggleClass('asc');
  }

  if ( $('#tblSummaryContainer').hasClass('hidden') ) {
    $('#tblSummaryContainer').toggleClass('hidden');
  }

  jsonData = getSummary();

  if (jsonData) {

    jsonData = $.parseJSON(jsonData);

    $('#tblSummary tbody tr').remove();

    for (var i = 0; i < jsonData.length; i++) {
      tr = $('<tr/>');
      tr.append('<td class=' +'\"center-align rownums\"'+'>'+ '</td>');
      tr.append('<td class='+'center-align'+'>' + jsonData[i].Routine + '</td>');
      tr.append('<td class='+'right-align'+'>' + jsonData[i].LinesCode + '</td>');
      tr.append('<td class='+'right-align'+'>' + jsonData[i].LinesHit + '</td>');
      tr.append('<td class='+'right-align'+'>' + jsonData[i].Time + '</td>');
      $('#tblSummaryBody').append(tr);
    }

    $('#tblSummary').trigger('update');
    $('#timeCell').click();
  };

}


// rotines pattern popup's handlers
$(function() {
  $('#btnStart').click(function() {
    $('#searchPopup').toggleClass('active');
    $('#search').focus();
  });

  $('#search').focus(function() {
    $(this.value).show();
  });


  $('#search').keyup(function(event) {
    event = event || window.event //For IE

    if(event.keyCode == 13) {
      btnRoutinesPopupClick();
    }

   /*  Doesn't properly working yet except Chrome
   $('#searchPopup').on("focusout", function() { 
     $('#searchPopup').toggleClass("active");
   });
   */

  });
});



// Menu button's click handler
function menuBtnClick(type, rtnNames) {
  // variable declaration
  var
    reg,
    routineList,
    status,
    i;

  switch (type) {

    case 'Start':

      reg = /\s*,\s*/
      routineList = rtnNames.split(reg);
      rtnNames = '';

      for (i = 0; i < routineList.length; i++) {
        rtnNames = rtnNames + routineList[ i ] + '|';
      }

      rtnNames = rtnNames.slice(0, -1);

      status = startMonitor(rtnNames);

      // it's ok. Status contains number of selected routines
      if (status > 0) {
        $('#emptyRoutinePatternText').text(status + ' routine(s) added to selection.');

        if ($('#emptyRoutinePattern').hasClass('hidden')) {
          $('#emptyRoutinePattern').toggleClass('hidden');
        }

        $('#btnStart').prop('disabled', true);
        $('#btnStop').prop('disabled', false);
        $('#btnPauseResume').prop('disabled', false);
        $('#btnSummary').prop('disabled', false);
        $('#labelStatus').text('Status: Running');
      }
      // specified routine was not found
      else if (status == 0) {
        if ($('#routineNotFound').hasClass('hidden')) {
          $('#routineNotFound').toggleClass('hidden');
        }
      }
      // memory allocation failed
      else if (status == -1) {
        $('#methodErrorText').text( 'Memory allocation failed.');
        $('#methodError').toggleClass( 'hidden' );    
      }
      // couldn't enable stats  collection
      else if (status == -2) {
        $('#methodErrorText').text('Couldn\'t enable stats collection');
        $('#methodError').toggleClass('hidden');
      }

      break;

    case 'Stop':
      bootbox.confirm('It will wipe all statistics. Resume?', function(result) {
        if (result) {
          
          setTimeout(stopMonitor, 200);
          
          $('#btnStart').prop('disabled', false);
          $('#btnStop').prop('disabled', true);
          $('#btnPauseResume').html('Pause');
          $('#btnPauseResume').prop('disabled', true);
          $('#btnSummary').prop('disabled', true);
          $('#labelStatus').text('Status: Stopped');

          $('#tblSummaryBody tr').remove();

          if (!$('#tblSummaryContainer').hasClass('hidden')) {
            $('#tblSummaryContainer').toggleClass('hidden');
          }

          if (!$("#methodError").hasClass('hidden')) {
            $("#methodError").toggleClass('hidden');
          }

          if (!$("#routineNotFound").hasClass('hidden')) {
            $("#routineNotFound").toggleClass('hidden');
          }

          if (!$("#emptyRoutinePattern").hasClass('hidden')) {
            $("#emptyRoutinePattern").toggleClass('hidden');
          }

          if ($(".js-jumbotron").hasClass('hidden')) {
            $(".js-jumbotron").toggleClass('hidden');
          }
        }
      });

      break;

    case 'Pause':
      status = pauseMonitor();

      if (status == -1) {
        $('#methodErrorText').text('Somebody else is using Monitor');
        $('#methodError').toggleClass('hidden');
      }
      else if (status == -2) {
        $('#methodErrorText').text('Monitor is not running');
        $('#methodError').toggleClass('hidden');
      }
      else if (status == -3) {
        $('#methodErrorText').text('Monitor is already paused');
        $('#methodError').toggleClass('hidden');
      }

      $("#labelStatus").text('Status: Paused');
      $("#btnPauseResume").html('Resume');
      break;

    case 'Resume':
      status = resumeMonitor();

      if (status == -1) {
        $('#methodErrorText').text('Somebody else is using Monitor');
        $('#methodError').toggleClass('hidden');
      }
      else if (status == -2) {
        $('#methodErrorText').text('Monitor is not running');
        $('#methodError').toggleClass('hidden');
      }
      else if (status == -3) {
        $('#methodErrorText').text('Monitor is already running');
        $('#methodError').toggleClass('hidden');
      }

      $("#labelStatus").text('Status: Running');
      $("#btnPauseResume").html('Pause');

      break;

    default:
      break;
  };
};

// Summary table click handler
$("#tblSummary").on("click", function(e) {

  // variable declaration
  var
    target,
    name;

  target = e && e.target || window.event.srcElement;

  while (target !== this) {
    if (target.tagName == 'TH') {
      break;
    }

    if (target.tagName == 'TR') {
      name = target.getElementsByTagName("td")[1].innerHTML;
      window.location.href = 'routine.csp?name=' + name;
      break;
    }

    target = target.parentNode;
  }
});
]]></CSP>
</Export>
