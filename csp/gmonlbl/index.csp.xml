<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="index.csp" application="/csp/user/gmonlbl/"><![CDATA[
<!DOCTYPE html>

<html>
  <head>
    <title> Cache Server Page </title>

    <!-- CSS Initializing -->
    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.min.css">
    <link rel="stylesheet" type="text/css" href="css/non-responsive.css">
    <link rel="stylesheet" type="text/css" href="css/custom.css">

  </head>
    
  <body>

    <!-- main-container for "sticky" footer -->
    <div class="main-container">

      <!-- Navbar section start-->
      <div class="navbar navbar-default" role="navigation">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">MONLBL Viewer</a>
          <ul class="nav navbar-nav">
            <li><button class="btn navbar-btn btn-default" id="btnStart" type="button">Start</button></li>
            <li><button class="btn navbar-btn btn-default" id="btnStop" type="button" onclick="menuBtnClick('Stop');">Stop</button></li>
            <li><button class="btn navbar-btn btn-default" id="btnPauseResume" type="button">Pause</button></li>
            <li><button class="btn navbar-btn btn-default" id="btnSummary" type="button">Summary</button></li>
          </ul>
          <label class="navbar-status pull-right" id="labelStatus"></label>
        </div>
      </div>
      <!-- Navbar section end -->

      <!-- Search (Routines pattern) popup section start --> 
      <div class="search-popup search-container" id="searchPopup">
        <div class="search-input">      
          <button class="btn btn-default search-btn" type="button" id="btnRoutinesPopup">Start Monitor</button>
          <input type="search" id="search" placeholder="List of routines separated by commas"/>
          <span class="search-label">Routine patterns</span>
        </div>
      </div>
      <!-- Search popup section end -->


      <!-- Alerts section start -->
      <div class="alert alert-info alert-routine hidden" id="emptyRoutinePattern">
        <p id="emptyRoutinePatternText"></p>
        <button type="button" class="close" onclick="$('#emptyRoutinePattern').toggleClass('hidden');">×</button>
      </div>

      <div class="alert alert-info alert-routine hidden" id="routineNotFound">
        Routine not found.
        <button type="button" class="close" onclick="$('#routineNotFound').toggleClass('hidden');">×</button>
      </div>

      <div class="alert alert-danger alert-routine hidden" id="methodError">
        <p id="methodErrorText"></p>
        <button type="button" class="close" onclick="$('#methodError').toggleClass('hidden');">×</button>
      </div>
      <!-- Alerts section end -->

      <!-- Jumbotron section start -->
      <div class="js-jumbotron jumbotron">
        <h1>MONLBL Viewer</h1>
        <p>A web tool to explore statistics of Caché Monitor</p>
      </div>
      <!-- Jumbotron section end -->

      <!-- Summary table section start -->
      <div class="tbl-container hidden" id="tblSummaryContainer">
        <table id="tblSummary" class="table table-bordered table-hover cursor-pointer">
          <thead>
            <tr>
              <th class="numbering-cell center-align">#</th>
              <th data-type="string" class="active-hover asc center-align">Routine</th>
              <th data-type="number" class="number-cell active-hover asc center-align">Lines</th>
              <th data-type="number" class="number-cell active-hover asc center-align">Lines Hit</th>
              <th data-type="number" class="number-cell active-hover asc center-align" id="timeCell">Time</th>
            </tr>
          </thead>
          <tbody id="tblSummaryBody">
          </tbody>
        </table>
      </div>
      <!-- Summary table section end -->

      <!-- push for "sticky" footer -->
      <div class="push"></div>

    </div>

    <!-- Footer section start -->
    <div class="footer">© 2014 SS23, InterSystems</div> 
    <!-- Footer section end -->

    <!-- Scripts -->
    <script language="javascript" type="text/javascript" src="lib/jquery-1.11.1.min.js"></script>
    <script language="javascript" type="text/javascript" src="lib/bootstrap.min.js"></script>
    <script language="javascript" type="text/javascript" src="lib/bootbox.min.js"></script>
    <script language="javascript" type="text/javascript" src="lib/custom.js"></script>
    
    <script language="javascript" type="text/javascript">
      var routineList = ''; 
      tableSorting('tblSummary'); 
    
      var getMonitorStatus = function() {
        return +#(..EscapeHTML(..CheckMonitorStatus()))#; 
      }; 
      
      var getSummary = function() {
        return #server(..GetSummary())#;  
      };
      
      var startMonitor = function(rtnNames) {
        return +#server(..StartMonitor(rtnNames))#;  
      };
      
      var stopMonitor = function() {
        return +#server(..StopMonitor())#;  
      };
      
      var pauseMonitor = function() {
        return +#server(..PauseMonitor())#;  
      };
      
      var resumeMonitor = function() {
        return +#server(..ResumeMonitor())#;  
      };  
   </script> 
        
    <script language="javascript" type="text/javascript" src="js/eventHandlers.js" async></script>
    <script language="javascript" type="text/javascript" src="js/pageInit.js" async></script> 

  <!-- Cache Scripts -->

  <script language="Cache" method="CheckMonitorStatus" arguments="" returntype="%String">

  // if $zu(84,8) = 0 then Monitor stopped
  if ( $zu( 84, 8 ) = 0 ) {
    return 0
  }

  // if $zu(84,8) = 1 then Monitor started
  if ( $zu( 84, 8 ) = 1 ) {
    // if $zu(84,1) = 0 then Monitor started, but paused
    if ( $zu( 84, 1 ) = 0 ) {
      return 2
    }
    return 1
  }
</script>
  
  <script language="Cache" method="StartMonitor" arguments="routineList:%String" returntype="%String">

  kill j, ctx, data, i, more, nlist, rtn, rtnName

  lock +^|"%SYS"|SYS("MON-HOLD"):3

  // deselect all, prepare to incoming routine list
  do $zu( 84, 12, 0 )

  set j = 1
  set nlist = 0
  set rtnName = $piece( routineList, "|", j )
      
  while ( rtnName '= "" ) {
    set rtnName = rtnName_".obj"

    do {
      set data = ""
      set more = $$LIST^%R( rtnName, 32767, 0, .data, .ctx )

      for i = 1 : 1 : $listlength( data ) {
        set rtn = $list( data, i )
        set rtn = $piece( rtn, ".", 1, $length( rtn, "." ) - 1 )

        if ( $znspace = "%SYS" && rtn = "START" ) {
          continue
        }

        x "zl "_rtn_" set ok = $zu( 84, 12, 1 )"

        if ( ok ) { 
          set nlist = nlist + 1
        }
      }
    } while more

    set j = j + 1
    set rtnName = $piece( routineList, "|", j )
  }

  if ( nlist = 0 ) {
    return nlist
  }

  // select all
  do $zu( 84, 13, 2 )

  // allocate memory and initialize data structures
  // (switch on monitoring)
  if ( $zu( 84, 0, 1, 1, 1, 1, 1, 1 ) '= 1 ) {
    return -1
  }
 
  // enable stats for all jobs
  if ($zu( 84, 1, 1 ) '= 1 ) {
    return -2
  }

  // enable line-by-line monitoring
  do $zu( 84, 15 )

  set ^|"%SYS"|SYS("MONITOR","START") = $h
  kill ^|"%SYS"|SYS("MONITOR","PAUSE"),^|"%SYS"|SYS("MONITOR","PAUSE-TIME")

  lock -^|"%SYS"|SYS("MON-HOLD")

  return nlist
</script>
  
  <script language="Cache" method="StopMonitor" arguments="" returntype="%String">
  set status = 1

  lock +^|"%SYS"|SYS("MON-HOLD"):3

  // disable stats
  set zu84 = $zu( 84, 1, 0 )

  // end collection
  set zu84 = $zu( 84, 0, 0 )

  kill ^|"%SYS"|SYS("MONITOR","START")
  kill ^|"%SYS"|SYS("MONITOR","PAUSE"),^|"%SYS"|SYS("MONITOR","PAUSE-TIME")

  lock -^|"%SYS"|SYS("MON-HOLD")

  return status

</script>

  <script language="Cache" method="PauseMonitor" arguments="" returntype="%String">

  lock +^|"%SYS"|SYS("MON-HOLD"):3

  // somebody already uses monitor 
  else  lock -^|"%SYS"|SYS("MON-HOLD") return -1

// monitor is not running
  if ( $zu( 84, 8 ) = 0 ) {
    lock -^|"%SYS"|SYS("MON-HOLD")
    return -2
  }

  // monitor already paused
  if ( $zu( 84, 1 ) = 0) {
    lock -^|"%SYS"|SYS("MON-HOLD")
    return -3
  }

  // disable stats
  set zu84 = $zu( 84, 1, 0 )

  set ^|"%SYS"|SYS("MONITOR","PAUSE") = $h 
  lock -^|"%SYS"|SYS("MON-HOLD")

  return 1
</script>

  <script language="Cache" method="ResumeMonitor" arguments="" returntype="%String">

  lock +^|"%SYS"|SYS("MON-HOLD"):3
  
  // Somebody already uses monitor 
  else  lock -^|"%SYS"|SYS("MON-HOLD") return -1

  // Monitor is not running
  if ( $zu( 84, 8 ) = 0 ) {
    lock -^|"%SYS"|SYS("MON-HOLD")
    return -2
  }

  // Monitor already running
  if ( $zu( 84, 1 ) = 1 ) {
    lock -^|"%SYS"|SYS("MON-HOLD")
    return -3
  }

  set zu84 = $zu( 84, 1, 1 )
  set h1 = $h

  if $d(^|"%SYS"|SYS("MONITOR","PAUSE")) {

    set x=((h1-^|"%SYS"|SYS("MONITOR","PAUSE"))*86400)+($p(h1,",",2)-$p(^|"%SYS"|SYS("MONITOR","PAUSE"),",",2))
    set ^|"%SYS"|SYS("MONITOR","PAUSE-TIME")=x+$g(^|"%SYS"|SYS("MONITOR","PAUSE-TIME"))
    kill ^|"%SYS"|SYS("MONITOR","PAUSE")
  }

  lock -^|"%SYS"|SYS("MON-HOLD")
  return 1
</script>

  <script language="Cache" method="GetSummary" arguments="" returntype="%String">
  set index = $increment( ^CacheTemp )
  $$$AddTempNode( ^CacheTemp( index ) )
  
  set sortIndex = -1
  set rtnLine = -1
  
  for metric = 0 : 1 : ( $zutil( 84, 13 ) - 1 ) {
    set n = $zutil( 84, 13, 11, metric )
    
    if ( n = 50 ) {
      set sortIndex = metric
    }
    
    if ( n = 33 ) {
      set rtnLine = metric
    }
    
  }

  // $zu(84,16) returns number of routines being monitored
  for rtnNum = 1 : 1 : ( $zu( 84, 16 ) ) {
    // don't report on routines with no lines executed
    if $zu( 84, 16, 1, rtnNum ) = 0 {
      continue
    }

    kill metric
    set hits = 0
    // zero coverage stats
    if $zutil( 84, 16, 1, rtnNum ) = 0 {
      // get number of lines in routine
      set line = $$LENGTH^%R( $zu( 84, 16, 2, rtnNum ) )

      if ( line = 0 ) { 
        set metric( -1 ) = -1
        set metric( -2 ) = 0
        set metric( -3 ) = "NA"
      }
      else {
        set metric( -1 ) = 0
        set metric( -2 ) = 0
        set metric( -3 ) = line
      }
    }

    // for each routine line
    for line = 0 : 1 : ( $zu( 84, 16, 1, rtnNum ) - 1 ) {
    // for each metric
      for i = 0 : 1 : ( $zu( 84, 13 ) - 1 ) {
        set metric( i ) = $get( metric( i ) ) + $zu( 84, 16, 3, line, i )
      }

      if $zu( 84, 16, 3, line, rtnLine ) {
        set hits = hits + 1
      }
    }

    set line = $zu( 84, 16, 7, rtnNum )
    set metric( -3 ) = line
    set metric( -2 ) = hits
    set metric( -1 ) = +$fnumber( hits / line * 100, "", 2)

    // $zu(84,16,2,rtn_n) returns routine name by number
    set rtn = $zu( 84, 16, 2, rtnNum )

    if ( sortIndex = -1 ) {
      set sort = sortIndex
    }
    else {
      set sort = metric( sortIndex )
    }

    merge ^CacheTemp( index, sort, rtn ) = metric
  }

  kill totmetric
  kill summary

  set count = 0
  set sort = $order( ^CacheTemp( index, "" ), -1 )

  while ( sort '= "" ) {
    set rtn = $order( ^CacheTemp( index, sort, "" ) )

    while ( rtn '= "" ) {
      set summary( rtn ) = count
      set count = count + 1
      set metric = $order( ^CacheTemp( index, sort, rtn, "" ), 1, out)

      while ( metric '= "" ) {
        set totmetric( metric ) = $get( totmetric( metric ) ) + out
        // handle coverage percent
        if ( metric = -3 ) {
          set out = $select( out = -1:"NA", 1:out)
          set summary( rtn, "LinesCode" ) = out
        }
        
        if ( metric = -2 ) {
          set out = $select( out = -1:"NA", 1:out )
          set summary( rtn, "LinesHit" ) = out
        }
        
        set n = ""
        
        if ( metric '< 0 ) {
          set n = $zu( 84, 13, 11, metric )
        }
        
        if ( ( n = 50 ) || ( n = 51 ) ) {
          set out = $select( out = 0:"0", 1:$fnumber( out / 1000000, "", 6 ))
        }
        
        // don't accumulate total time, it doesn't make sense
        if ( n = 50 ) {
          set summary( rtn, "Time" ) = out
        }

        set metric = $order( ^CacheTemp( index, sort, rtn, metric ), 1, out )
      }

      set rtn = $order( ^CacheTemp( index, sort, rtn ) )
    }

    set sort = $order( ^CacheTemp( index, sort ), -1 )
  }

  kill ^CacheTemp( index )
  $$$RemoveTempNode( ^CacheTemp( index ) )

  set json = "["
  set rtn = $order( summary( "" ) )
  
  while ( rtn '= "" ) {
    set json = json_"{""Routine"":"""_rtn_
                    """,""LinesCode"":"""_summary( rtn, "LinesCode" )_
                    """,""LinesHit"":"""_summary( rtn, "LinesHit" )_
                    """,""Time"":"""_summary( rtn, "Time" )_"""},"
    set rtn = $order( summary( rtn ) )              
  }

  if ( json '= "[" ) {
    set json = $extract( json, 1, *-1 )_"]"
  }
  else {
    set json = ""
  }

  return json
</script>

  </body>

</html>
]]></CSP>
</Export>
